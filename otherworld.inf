Constant Story "The Otherworld";
Constant Headline "^By Christopher Dumas^";

Constant ROOM_SCORE = 2;
Constant MAX_SCORE = 160;

Replace DrawStatusLine;
Statusline time;
Include "Parser";
Object  LibraryMessages
 with   before [ previous_parent;
         Go:
            if (lm_n == 1 && lm_o has supporter) {
                print "(first getting off ", (the) lm_o, ")^";
                previous_parent = parent(player);
                keep_silent = true; <Exit>; keep_silent = false;
                if (player in parent(previous_parent)) <<Go noun>>;
                rtrue;
            } else if (lm_n == 2) {
                "You don't need to go that way.";
            }
        ];
Include "VerbLib";
Include "MoveClass";

Include ">Locations";

[ DrawStatusLine width posa posb posc hours minutes;
    @split_window 1;
    @set_window 1;
    @set_cursor 1 1;
    style reverse;
    
    hours = the_time/60;
    minutes = the_time-(hours*60);
    
    width = 0->33;
    posa = width-26;
    posb = width-13;
    posc = width-44;
    
    spaces (width);
    @set_cursor 1 2; PrintShortName(location);
    if (width > 76) {
        @set_cursor 1 posa; print "", hours, ":", minutes;
        @set_cursor 1 posc; print "Date: ", month, "/", day, "/", year;
        @set_cursor 1 posb; print "Moves: ", sline2;
    }
    if (width > 63 && width <= 76) {
     @set_cursor 1 posb; print sline1, "/", sline2;
    }
    @set_cursor 1 1; style roman; @set_window 0;
];

[ TwoWay x dp1 dp2 y;
    y = x.dp1; if (metaclass(y) == Object && y ofclass Room) y.dp2 = x;
    y = x.dp2; if (metaclass(y) == Object && y ofclass Room) y.dp1 = x;
];

[ Initialise x;
    notify_mode = false;
    SetTime(60 * 12 + 30, 30);
    StartDaemon(Sun);
    
    player = CustomPlayer;
    location = Meadow;
    
    StartDaemon(monarch_butterfly);
    NPC_Path(monarch_butterfly, RANDOM_MOVE, 80);
    StartDaemon(swallowtale_butterfly);
    NPC_Path(swallowtale_butterfly, RANDOM_MOVE, 80);
    
    objectloop (x ofclass Room) {
        TwoWay(x, n_to, s_to);   TwoWay(x, e_to, w_to);
        TwoWay(x, ne_to, sw_to); TwoWay(x, nw_to, se_to);
        TwoWay(x, u_to, d_to);   TwoWay(x, in_to, out_to);
    }
    print "A majestic wilderness nearly untouched by men until now.
        You have come to see it and explore it, among the first few
        to do so. You were given a hero's send-off and expect a
        hero's welcome when you return with your carfully drawn map
        of these strange lands. But along with the excitement of
        exploration comes the danger. This is no cakewalk. The
        Otherworld awaits...^^";
];

Include "Grammar";
! Grammar stuff...
Verb 'ride' = 'climb';
Extend 'climb'
    * 'onto' noun                       -> Climb
    * 'on' noun                         -> Climb;

[ ContainsClass o c x;
    objectloop (x && x in o && x ofclass c)
        return x;
];

[ ChopSub st; st = ContainsClass(player, SharpTool);
    if (noun ofclass Plant && ~~st) {
        if (~second) print "(with ", (the) st ,")";
        <<Attack noun>>;
    } else if (~(noun ofclass Plant))
        print_ret "You can't chop that down.";
    else
        print_ret "You can't use that to chop with.";
];

Extend 'chop' replace
    * noun 'with' noun                  -> Chop
    * noun                              -> Chop
    * noun 'down'                       -> Chop
    * noun 'down' 'with' noun           -> Chop;

Verb 'talk' = 'tell';
Verb 'sooth' = 'tell';

Extend 'tell'
    * 'to' noun                         -> Tell;

Extend 'speak'
    * 'to' noun                         -> Tell;

Extend 'sing'
    * 'to' noun                         -> Sing;

Extend 'drink' first
    * 'from' noun                       -> Drink
    * noun 'from' noun                  -> Drink reverse;


[ HelpSub;
    "^Credits:^ Programming, writing, and location desgin by: Christopher Dumas.^ Some writing,
    and spotty location design, and the playtesting was done
    by: Christina Dumas.^ ^About:^ You get two points for
    discovering a new location. The only way to score in this game
    is to explore, so for higher scores try to find hidden locations
    or blocked locations. Scoring is not important in this game as
    much as just exploring and having fun are, so your score is not
    displayed in the statusline. Instead, type SCORE to see your
    score. This game rewards close examination. Use EXAMINE or X to
    examine things, and do it often.";
];
Verb 'about' 'help'
    *                                   -> Help;

Verb 'dismount' = 'exit';
Verb 'rest' = 'wait';
Verb 'catch' = 'take';
Verb 'grab' = 'take';

Extend 'get'
    * 'off'                             -> Exit;

Extend 'dig'
    * noun 'out'                        -> Dig;

Verb 'pour'
    * noun 'on' noun                    -> PutOn
    * noun 'onto' noun                  -> PutOn;

[ FeelAroundSub;
    if (real_location has light)
        "You feel nothing particularly unexpected. Anyway, you can
        SEE, so why feel?";
];

Extend 'touch' first
    * 'around'                          -> FeelAround
    *                                   -> FeelAround;
